{
  "version": 3,
  "sources": ["../../@hookform/resolvers/joi/src/joi.ts"],
  "sourcesContent": ["import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport type { ValidationError } from 'joi';\nimport { FieldError, appendErrors } from 'react-hook-form';\nimport { Resolver } from './types';\n\nconst parseErrorSchema = (\n  error: ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error.details.length\n    ? error.details.reduce<Record<string, FieldError>>((previous, error) => {\n        const _path = error.path.join('.');\n\n        if (!previous[_path]) {\n          previous[_path] = { message: error.message, type: error.type };\n        }\n\n        if (validateAllFieldCriteria) {\n          const types = previous[_path].types;\n          const messages = types && types[error.type!];\n\n          previous[_path] = appendErrors(\n            _path,\n            validateAllFieldCriteria,\n            previous,\n            error.type,\n            messages\n              ? ([] as string[]).concat(messages as string[], error.message)\n              : error.message,\n          ) as FieldError;\n        }\n\n        return previous;\n      }, {})\n    : {};\n\nexport const joiResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    const _schemaOptions = Object.assign({}, schemaOptions, {\n      context,\n    });\n\n    let result: Record<string, any> = {};\n    if (resolverOptions.mode === 'sync') {\n      result = schema.validate(values, _schemaOptions);\n    } else {\n      try {\n        result.value = await schema.validateAsync(values, _schemaOptions);\n      } catch (e) {\n        result.error = e;\n      }\n    }\n\n    if (result.error) {\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            result.error,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      errors: {},\n      values: result.value,\n    };\n  };\n"],
  "mappings": ";;;;;;;;;;;AAKA,IAAM,mBAAmB,CACvB,OACA,6BAEA,MAAM,QAAQ,SACV,MAAM,QAAQ,OAAmC,CAAC,UAAUA,WAAU;AACpE,QAAM,QAAQA,OAAM,KAAK,KAAK,GAAG;AAEjC,MAAI,CAAC,SAAS,KAAK,GAAG;AACpB,aAAS,KAAK,IAAI,EAAE,SAASA,OAAM,SAAS,MAAMA,OAAM,KAAK;AAAA,EAC/D;AAEA,MAAI,0BAA0B;AAC5B,UAAM,QAAQ,SAAS,KAAK,EAAE;AAC9B,UAAM,WAAW,SAAS,MAAMA,OAAM,IAAK;AAE3C,aAAS,KAAK,IAAI;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACAA,OAAM;AAAA,MACN,WACK,CAAC,EAAe,OAAO,UAAsBA,OAAM,OAAO,IAC3DA,OAAM;AAAA,IACZ;AAAA,EACF;AAEA,SAAO;AACT,GAAG,CAAC,CAAC,IACL,CAAC;AAEA,IAAM,cACX,CACE,QACA,gBAAgB;AAAA,EACd,YAAY;AACd,GACA,kBAAkB,CAAC,MAErB,OAAO,QAAQ,SAAS,YAAY;AAClC,QAAM,iBAAiB,OAAO,OAAO,CAAC,GAAG,eAAe;AAAA,IACtD;AAAA,EACF,CAAC;AAED,MAAI,SAA8B,CAAC;AACnC,MAAI,gBAAgB,SAAS,QAAQ;AACnC,aAAS,OAAO,SAAS,QAAQ,cAAc;AAAA,EACjD,OAAO;AACL,QAAI;AACF,aAAO,QAAQ,MAAM,OAAO,cAAc,QAAQ,cAAc;AAAA,IAClE,SAAS,GAAG;AACV,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AAEA,MAAI,OAAO,OAAO;AAChB,WAAO;AAAA,MACL,QAAQ,CAAC;AAAA,MACT,QAAQ;AAAA,QACN;AAAA,UACE,OAAO;AAAA,UACP,CAAC,QAAQ,6BACP,QAAQ,iBAAiB;AAAA,QAC7B;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,UAAQ,6BAA6B,EAAuB,CAAC,GAAG,OAAO;AAEvE,SAAO;AAAA,IACL,QAAQ,CAAC;AAAA,IACT,QAAQ,OAAO;AAAA,EACjB;AACF;",
  "names": ["error"]
}
